// Generated by gencpp from file imu_driver/Control.msg
// DO NOT EDIT!


#ifndef IMU_DRIVER_MESSAGE_CONTROL_H
#define IMU_DRIVER_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_driver
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : leftUpSteer(0)
    , leftDownSteer(0)
    , rightUpSteer(0)
    , rightDownSteer(0)
    , leftUpSpeed(0)
    , rightUpSpeed(0)
    , leftDownSpeed(0)
    , rightDownSpeed(0)
    , turningMode(0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : leftUpSteer(0)
    , leftDownSteer(0)
    , rightUpSteer(0)
    , rightDownSteer(0)
    , leftUpSpeed(0)
    , rightUpSpeed(0)
    , leftDownSpeed(0)
    , rightDownSpeed(0)
    , turningMode(0)  {
  (void)_alloc;
    }



   typedef int8_t _leftUpSteer_type;
  _leftUpSteer_type leftUpSteer;

   typedef int8_t _leftDownSteer_type;
  _leftDownSteer_type leftDownSteer;

   typedef int8_t _rightUpSteer_type;
  _rightUpSteer_type rightUpSteer;

   typedef int8_t _rightDownSteer_type;
  _rightDownSteer_type rightDownSteer;

   typedef int8_t _leftUpSpeed_type;
  _leftUpSpeed_type leftUpSpeed;

   typedef int8_t _rightUpSpeed_type;
  _rightUpSpeed_type rightUpSpeed;

   typedef int8_t _leftDownSpeed_type;
  _leftDownSpeed_type leftDownSpeed;

   typedef int8_t _rightDownSpeed_type;
  _rightDownSpeed_type rightDownSpeed;

     typedef int8_t _turningMode_type;
  _rightDownSpeed_type turningMode; //0:go and turn; 1:stop and turn


  typedef boost::shared_ptr< ::imu_driver::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_driver::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::imu_driver::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::imu_driver::Control > ControlPtr;
typedef boost::shared_ptr< ::imu_driver::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_driver::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_driver::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imu_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'imu_driver': ['/home/cxf/catkin_ws/src/imu_driver/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imu_driver::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_driver::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_driver::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_driver::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_driver::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_driver::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_driver::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4953bc3078073848b30fcd5e6f82712d";
  }

  static const char* value(const ::imu_driver::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4953bc3078073848ULL;
  static const uint64_t static_value2 = 0xb30fcd5e6f82712dULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_driver::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_driver/Control";
  }

  static const char* value(const ::imu_driver::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_driver::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 leftUpSteer\n\
int8 leftDownSteer\n\
int8 rightUpSteer\n\
int8 rightDownSteer\n\
int8 leftUpSpeed\n\
int8 rightUpSpeed\n\
int8 leftDownSpeed\n\
int8 rightDownSpeed\n\
int8 turningMode\n\
";
  }

  static const char* value(const ::imu_driver::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_driver::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftUpSteer);
      stream.next(m.leftDownSteer);
      stream.next(m.rightUpSteer);
      stream.next(m.rightDownSteer);
      stream.next(m.leftUpSpeed);
      stream.next(m.rightUpSpeed);
      stream.next(m.leftDownSpeed);
      stream.next(m.rightDownSpeed);
      stream.next(m.turningMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_driver::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_driver::Control_<ContainerAllocator>& v)
  {
    s << indent << "leftUpSteer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leftUpSteer);
    s << indent << "leftDownSteer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leftDownSteer);
    s << indent << "rightUpSteer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rightUpSteer);
    s << indent << "rightDownSteer: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rightDownSteer);
    s << indent << "leftUpSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leftUpSpeed);
    s << indent << "rightUpSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rightUpSpeed);
    s << indent << "leftDownSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.leftDownSpeed);
    s << indent << "rightDownSpeed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rightDownSpeed);
    s << indent << "turningMode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.turningMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_DRIVER_MESSAGE_CONTROL_H
