// Generated by gencpp from file imu_driver/JY901_frame.msg
// DO NOT EDIT!


#ifndef IMU_DRIVER_MESSAGE_JY901_FRAME_H
#define IMU_DRIVER_MESSAGE_JY901_FRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace imu_driver
{
template <class ContainerAllocator>
struct JY901_frame_
{
  typedef JY901_frame_<ContainerAllocator> Type;

  JY901_frame_()
    : gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , angle_x(0.0)
    , angle_y(0.0)
    , angle_z(0.0)
    , latitute(0.0)
    , longtitute(0.0)  {
    }
  JY901_frame_(const ContainerAllocator& _alloc)
    : gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , angle_x(0.0)
    , angle_y(0.0)
    , angle_z(0.0)
    , latitute(0.0)
    , longtitute(0.0)  {
  (void)_alloc;
    }



   typedef double _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef double _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef double _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _acc_y_type;
  _acc_y_type acc_y;

   typedef double _acc_z_type;
  _acc_z_type acc_z;

   typedef double _angle_x_type;
  _angle_x_type angle_x;

   typedef double _angle_y_type;
  _angle_y_type angle_y;

   typedef double _angle_z_type;
  _angle_z_type angle_z;

   typedef double _latitute_type;
  _latitute_type latitute;

   typedef double _longtitute_type;
  _longtitute_type longtitute;




  typedef boost::shared_ptr< ::imu_driver::JY901_frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_driver::JY901_frame_<ContainerAllocator> const> ConstPtr;

}; // struct JY901_frame_

typedef ::imu_driver::JY901_frame_<std::allocator<void> > JY901_frame;

typedef boost::shared_ptr< ::imu_driver::JY901_frame > JY901_framePtr;
typedef boost::shared_ptr< ::imu_driver::JY901_frame const> JY901_frameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imu_driver::JY901_frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imu_driver::JY901_frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imu_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'imu_driver': ['/home/cxf/catkin_ws/src/imu_driver/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imu_driver::JY901_frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imu_driver::JY901_frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_driver::JY901_frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imu_driver::JY901_frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_driver::JY901_frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imu_driver::JY901_frame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imu_driver::JY901_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b05b9d9c52cbbb0d2e7535081c2782a9";
  }

  static const char* value(const ::imu_driver::JY901_frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb05b9d9c52cbbb0dULL;
  static const uint64_t static_value2 = 0x2e7535081c2782a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_driver::JY901_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_driver/JY901_frame";
  }

  static const char* value(const ::imu_driver::JY901_frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imu_driver::JY901_frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gyro_x \n\
float64 gyro_y  \n\
float64 gyro_z \n\
\n\
float64 acc_x \n\
float64 acc_y  \n\
float64 acc_z \n\
\n\
float64 angle_x \n\
float64 angle_y  \n\
float64 angle_z \n\
\n\
float64 latitute\n\
float64 longtitute\n\
\n\
";
  }

  static const char* value(const ::imu_driver::JY901_frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imu_driver::JY901_frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.angle_x);
      stream.next(m.angle_y);
      stream.next(m.angle_z);
      stream.next(m.latitute);
      stream.next(m.longtitute);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct JY901_frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_driver::JY901_frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imu_driver::JY901_frame_<ContainerAllocator>& v)
  {
    s << indent << "gyro_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.acc_z);
    s << indent << "angle_x: ";
    Printer<double>::stream(s, indent + "  ", v.angle_x);
    s << indent << "angle_y: ";
    Printer<double>::stream(s, indent + "  ", v.angle_y);
    s << indent << "angle_z: ";
    Printer<double>::stream(s, indent + "  ", v.angle_z);
    s << indent << "latitute: ";
    Printer<double>::stream(s, indent + "  ", v.latitute);
    s << indent << "longtitute: ";
    Printer<double>::stream(s, indent + "  ", v.longtitute);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMU_DRIVER_MESSAGE_JY901_FRAME_H
